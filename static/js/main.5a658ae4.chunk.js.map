{"version":3,"sources":["Components/Navbar/Navbar.jsx","Components/ImageResults/ImageResults.jsx","Components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","ImageResults","imagesListContainer","videosListContainer","this","props","images","videos","map","img","key","id","src","largeImageURL","alt","user","likes","favorites","comments","video","large","url","autoPlay","Home","onChangeAmount","e","index","value","setState","amount","target","onChangeType","onTextChange","val","name","state","Axios","get","apiUrl","apiKey","searchText","then","res","data","hits","catch","err","console","log","style","fontWeight","fontSize","placeholder","width","onChange","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a658ae4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-expand-md navbar-dark\">\r\n        <div className=\"container\">\r\n          <h4 class=\"navbar-brand\">PixaBay Finder</h4>\r\n          <button\r\n            class=\"navbar-toggler d-lg-block\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#collapsibleNavId\"\r\n            aria-controls=\"collapsibleNavId\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport './ImageResults.css';\r\nimport PropTypes from 'prop-types';\r\nimport { IoIosStarOutline } from 'react-icons/io';\r\nimport { AiOutlineLike } from 'react-icons/ai';\r\nimport { FaRegComment } from 'react-icons/fa';\r\n\r\nclass ImageResults extends Component {\r\n  render() {\r\n    const { images, videos } = this.props;\r\n    let imagesListContainer, videosListContainer;\r\n    if (images) {\r\n      imagesListContainer = images.map(img => {\r\n        return (\r\n          <div>\r\n            <img key={img.id} src={img.largeImageURL} alt=\"\" />\r\n            <p>\r\n              {img.user}{' '}\r\n              <span className=\"icons\">\r\n                <AiOutlineLike />: {img.likes} <IoIosStarOutline />:{' '}\r\n                {img.favorites} <FaRegComment />: {img.comments}\r\n              </span>{' '}\r\n            </p>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      imagesListContainer = null;\r\n    }\r\n\r\n    if (videos) {\r\n      videosListContainer = videos.map(video => {\r\n        return (\r\n          <div>\r\n            <video\r\n              key={video.id}\r\n              src={video.videos.large.url}\r\n              autoPlay\r\n            />\r\n            <p>\r\n              {video.user}{' '}\r\n              <span className=\"icons\">\r\n                <AiOutlineLike />: {video.likes} <IoIosStarOutline />:{' '}\r\n                {video.favorites} <FaRegComment />: {video.comments}\r\n              </span>{' '}\r\n            </p>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      videosListContainer = null;\r\n    }\r\n    return (\r\n      <section className=\"images-list p-2\">\r\n        <div className=\"container-fluid p-0\">\r\n          <div class=\"row\">\r\n            <div class=\"col-12\">\r\n              <div className=\"images-grid\">\r\n                {imagesListContainer}\r\n                {videosListContainer}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nImageResults.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n};\r\nexport default ImageResults;\r\n","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport ImageResults from '../ImageResults/ImageResults';\r\nimport Axios from 'axios';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchText: '',\r\n      amount: 20,\r\n      apiUrl: 'https://pixabay.com/api',\r\n      apiKey: '8696251-859c2c91bcc63d7c54c60731b',\r\n      images: [],\r\n      videos: [],\r\n      type: 'photo'\r\n    };\r\n  }\r\n\r\n  onChangeAmount = (e, index, value) => {\r\n    this.setState({ amount: e.target.value });\r\n  };\r\n  onChangeType = (e, index, value) => {\r\n    this.setState({ type: e.target.value });\r\n  };\r\n\r\n  onTextChange = e => {\r\n    const val = e.target.value;\r\n    this.setState({ [e.target.name]: val }, () => {\r\n      if (val === '') {\r\n        this.setState({ images: [], videos: [] });\r\n      } else if (this.state.type === 'photo') {\r\n        Axios.get(\r\n          `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=${this.state.type}&per_page=${this.state.amount}&safesearch=true`\r\n        )\r\n          .then(res => this.setState({ images: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      } else {\r\n        Axios.get(\r\n          `${this.state.apiUrl}/${this.state.type}/?key=${this.state.apiKey}&q=${this.state.searchText}&per_page=${this.state.amount}&safesearch=true`\r\n        )\r\n          .then(res => this.setState({ videos: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section className=\"banner\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <div className=\"content\">\r\n                  <h1 style={{ fontWeight: 'bold', fontSize: '3rem' }}>\r\n                    PixaBay Finder\r\n                  </h1>\r\n                  <h4>Stunning free images & royalty free stock</h4>\r\n                  <p>\r\n                    Over 1 million+ high quality stock images and videos shared\r\n                    by our talented community.\r\n                  </p>\r\n                  <form class=\"form-inline my-2 my-lg-2\">\r\n                    <input\r\n                      className=\"form-control mr-sm-2\"\r\n                      type=\"text\"\r\n                      placeholder=\"Search images & videos \"\r\n                      style={{ width: '20rem' }}\r\n                      name=\"searchText\"\r\n                      onChange={this.onTextChange}\r\n                    />\r\n                    <select\r\n                      className=\"custom-select custom-select-md mr-1\"\r\n                      name=\"amount\"\r\n                      onChange={this.onChangeAmount}\r\n                      value={this.state.amount}\r\n                    >\r\n                      <option value=\"5\">5</option>\r\n                      <option value=\"10\">10</option>\r\n                      <option value=\"20\">20</option>\r\n                      <option value=\"30\">30</option>\r\n                      <option value=\"50\">50</option>\r\n                    </select>\r\n                    <select\r\n                      className=\"custom-select custom-select-md mr-1\"\r\n                      name=\"amount\"\r\n                      onChange={this.onChangeType}\r\n                      value={this.state.type}\r\n                    >\r\n                      <option value=\"photo\">Photos</option>\r\n                      <option value=\"videos\">Videos</option>\r\n                    </select>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        {this.state.images.length > 0 ? (\r\n          <ImageResults images={this.state.images} />\r\n        ) : (\r\n          <ImageResults videos={this.state.videos} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar/Navbar';\nimport Home from './Components/Home/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}